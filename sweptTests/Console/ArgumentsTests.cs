//  Swept:  Software Enhancement Progress Tracking.
//  Copyright (c) 2009, 2016 Jason Cole and Envisage Technologies Corp.
//  This software is open source, MIT license.  See the file LICENSE for details.
using System;
using System.Linq;
using NUnit.Framework;
using System.IO;
using System.Collections.Generic;

namespace swept.Tests
{
    [TestFixture]
    public class ArgumentsTests
    {
        private MockStorageAdapter _storage;

        [SetUp]
        public void SetUp()
        {
            _storage = new MockStorageAdapter() { CWD = @"d:\code\project" };
            _storage.FilesInFolder[@"d:\code\project"] = new List<string> { "single.swept.library" };
        }

        [Test]
        public void Argument_defaults()
        {
            var args = new Arguments(new string[] { }, _storage);
            Assert.That(args.AreInvalid, Is.False, "No arguments are required.");

            Assert.That(args.AdHoc, Is.Empty, "Ad hoc rule only when specified.");
            Assert.That(args.BreakOnDeltaDrop, Is.False, "Default to not break the build until we request it explicitly.");
            Assert.That(args.ChangesFileName, Is.Empty, "Changes report not generated by default.");
            Assert.That(args.Check, Is.False, "User can request simple text results, default is details XML.");
            Assert.That(args.DeltaFileName, Is.Empty, "Delta report not generated by default.");
            Assert.That(args.DetailsFileName, Is.Empty, "Details report goes to console by default.");
            Assert.That(args.Exclude, Is.Empty, "By default exclude only the folders specified in the library.");
            Assert.That(args.Folder, Is.EqualTo(@"d:\code\project"), "The folder defaults to current working directory.");
            Assert.That(args.Foresight, Is.False, "Foresight report not generated by default.");
            Assert.That(args.History, Is.EqualTo(@"d:\code\project\single.swept.history"), "History file defaults to library name and location with suffix changed.");
            Assert.That(args.Library, Is.EqualTo(@"d:\code\project\single.swept.library"), "Library file defaults to single file matching *.swept.library within current folder.");
            Assert.That(args.Picks, Is.Empty, "We work with all rules, by default.");
            
            //  mid-change
            //Assert.That(args.Show, Is.False, "We run rules by default, instead of showing their text.");
            
            Assert.That(args.ShowUsage, Is.False, "We show help when it's requested.");
            Assert.That(args.ShowVersion, Is.False, "We show version when it's requested.");
            Assert.That(args.TrackHistory, Is.False, "We don't track history by default.");

            Assert.That(args.SpecifiedRules, Is.Empty, "Obsolescent.  Picks will obsolete this.");
            Assert.That(args.FileCountLimit, Is.EqualTo(-1), "Obsolete.  Trim reported files per rule.  PerFile report obsoletes this.");
            Assert.That(args.ChangeSet, Is.EqualTo("new_commits.xml"), "Experimental.  Foresight probably obsoletes this.");
            Assert.That(args.PipeSource, Is.EqualTo(PipeSource.None), "Experimental.  Foresight probably obsoletes this.");
        }

        [Test]
        public void Tag_and_ID_populate_Picks()
        {
            var args = new Arguments(new string[] { "tag:foo", "id:-bar" }, _storage);

            Assert.That(args.Picks.Count, Is.EqualTo(2));

            Assert.That(args.Picks[0].Domain, Is.EqualTo(PickDomain.Tag));
            Assert.That(args.Picks[0].Value, Is.EqualTo("foo"));

            Assert.That(args.Picks[1].Domain, Is.EqualTo(PickDomain.ID));
            Assert.That(args.Picks[1].Value, Is.EqualTo("-bar"));
        }

        [Test]
        public void Show_argument_has_proper_unary_default()
        {
            var args = new Arguments(new string[] { "show" }, _storage);

            Assert.That(args.Show, Is.EqualTo("*"));
        }

        [TestCase("web*")]
        [TestCase("web-011")]
        [TestCase("etc-411")]
        public void Show_as_binary_arg_adds_IDs_to_Picks(string showValue)
        {
            string showArg = "show:" + showValue;
            var args = new Arguments(new string[] { showArg }, _storage);

            Assert.That(args.Show, Is.EqualTo(showValue));
        }



        #region Base folder

        [Test]
        public void args_recognize_base_folder()
        {
            var argsText = new string[] { "folder:f:\\work\\project", "library:c:\\foo.library" };
            var args = new Arguments(argsText, _storage);
            Assert.That(args.Folder, Is.EqualTo(@"f:\work\project"));
        }

        [Test]
        public void folder_is_cwd_if_not_supplied_in_args()
        {
            var argsText = new string[] { "library:fizzbuzz.swept.library" };
            var args = new Arguments(argsText, _storage);
            Assert.That(args.Folder, Is.EqualTo("d:\\code\\project"));
        }

        [Test]
        public void folder_has_cwd_prefixed_if_relative()
        {
            var argsText = new string[] { "folder:project", "library:c:\\foo.library" };
            _storage.CWD = "c:\\fun_code";
            var args = new Arguments(argsText, _storage);
            Assert.That(args.Folder, Is.EqualTo(@"c:\fun_code\project"));
        }

        [Test]
        public void folder_is_unchanged_if_absolute()
        {
            var argsText = new string[] { "folder:c:\\project", "library:c:\\foo.library" };
            _storage.CWD = "f:\\fun_code";
            var args = new Arguments(argsText, _storage);
            Assert.That(args.Folder, Is.EqualTo(@"c:\project"));
        }

        [Test]
        public void path_combine_discards_first_arg_if_second_is_fully_qualified()
        {
            string folder = Path.Combine("f:\\fun_code", "c:\\project");
            Assert.That(folder, Is.EqualTo(@"c:\project"));
        }

        #endregion

        #region Library and History location

        [Test]
        public void library_with_relative_path_has_project_folder_prepended()
        {
            var argsText = new string[] { "library:fizzbuzz.swept.library" };
            var args = new Arguments(argsText, _storage);
            Assert.That(args.Library, Is.EqualTo("d:\\code\\project\\fizzbuzz.swept.library"));
        }

        [Test]
        public void library_with_absolute_path_is_unchanged()
        {
            var argsText = new string[] { "folder:f:\\work\\project", "library:E:\\work_items\\fizzbuzz.swept.library" };
            var args = new Arguments(argsText, _storage);
            Assert.That(args.Library, Is.EqualTo("E:\\work_items\\fizzbuzz.swept.library"));
        }

        [Test]
        public void Omitting_Library_arg_will_use_single_library_found_in_folder()
        {
            var searchFolder = "f:\\work\\search_here";
            var foundLibrary = "found.swept.library";
            var foundFiles = new List<string> { foundLibrary };
            _storage.FilesInFolder[searchFolder] = foundFiles;

            var argsText = new string[] { "folder:" + searchFolder };
            var args = new Arguments(argsText, _storage);

            Assert.That(args.Library, Is.EqualTo(Path.Combine(searchFolder, foundLibrary)));
        }

        [Test]
        public void Missing_Library_arg_throws_when_no_library_found_in_folder()
        {
            _storage.FilesInFolder["f:\\work\\search_here"] = new List<string>();
            var argsText = new string[] { "folder:f:\\work\\search_here" };

            var ex = Assert.Throws<Exception>( () => new Arguments( argsText, _storage ) );

            Assert.That( ex.Message, Is.EqualTo( "A library is required for Swept to run.  No library found in folder [f:\\work\\search_here]." ) );
        }

        [Test]
        public void Omitting_Library_arg_will_throw_when_multiple_libraries_found_in_folder()
        {
            string searchFolder = "f:\\work\\search_here";
            string foundLibrary = "found.swept.library";
            var foundFiles = new List<string> { foundLibrary, "another.swept.Library" };
            _storage.FilesInFolder[searchFolder] = foundFiles;
            var argsText = new string[] { "folder:" + searchFolder };

            var ex = Assert.Throws<Exception>( () => new Arguments( argsText, _storage ) );

            Assert.That( ex.Message, Is.EqualTo( String.Format( "Too many libraries (*.swept.library) found in folder [{0}].", searchFolder ) ) );
        }

        [TestCase("foo.custom.library.name", "foo.custom.history.name")]
        [TestCase("foo.custom.odd", "foo.custom.odd.history")]
        public void History_arg_will_default_to_name_from_library_name(string libName, string expectedHistoryName)
        {
            var searchFolder = "f:\\work\\search_here";
            var foundFiles = new List<string>();
            _storage.FilesInFolder[searchFolder] = foundFiles;

            var argsText = new string[] { "library:" + libName, "folder:" + searchFolder };
            var args = new Arguments(argsText, _storage);

            Assert.That(args.History, Is.EqualTo(Path.Combine(searchFolder, expectedHistoryName)));
        }

        [Test]
        public void History_arg_will_default_to_single_history_found_in_folder()
        {
            var searchFolder = "f:\\work\\search_here";
            var foundHistory = "found.swept.history";
            var foundFiles = new List<string> { foundHistory };
            _storage.FilesInFolder[searchFolder] = foundFiles;

            var argsText = new string[] { "folder:" + searchFolder };
            var args = new Arguments(argsText, _storage);

            Assert.That(args.History, Is.EqualTo(Path.Combine(searchFolder, foundHistory)));
        }

        #endregion

        [Test]
        public void Exclude_collects_entries_via_comma_or_repetition()
        {
            var argsText = new string[] { "exclude:lib,build,database", "exclude:bonus" };
            var args = new Arguments( argsText, _storage );

            Assert.That( args.Exclude.Count(), Is.EqualTo( 4 ) );
        }

        [Test]
        public void Details_sets_filename_xml_output()
        {
            var args = new Arguments( new string[] { "details:flahnam.out" }, _storage );
            Assert.That( args.DetailsFileName, Is.EqualTo( "flahnam.out" ) );
        }

        [Test]
        public void Can_specify_rule_to_run()
        {
            var args = new Arguments( new string[] { "rule:INT-002" }, _storage );
            Assert.That( args.SpecifiedRules[0], Is.EqualTo( "INT-002" ) );
        }

        [Test]
        public void Can_specify_rules_to_run()
        {
            var args = new Arguments( new string[] { }, _storage );
            Assert.That( args.SpecifiedRules.Count, Is.EqualTo( 0 ) );

            args = new Arguments( new string[] { "rule:INT-002,INT-003" }, _storage );
            Assert.That( args.SpecifiedRules.Count, Is.EqualTo( 2 ) );
            Assert.That( args.SpecifiedRules[0], Is.EqualTo( "INT-002" ) );
            Assert.That( args.SpecifiedRules[1], Is.EqualTo( "INT-003" ) );
        }

        [Test]
        public void Can_set_filename_for_Delta_xml_output()
        {
            var args = new Arguments( new string[] { "delta:flahnam.out" }, _storage );
            Assert.That( args.DeltaFileName, Is.EqualTo( "flahnam.out" ) );
        }

        [Test]
        public void FillExclusions_sets_folder_exclusion_list()
        {
            var args = new Arguments( new string[] { }, _storage );
            Assert.That( args.Exclude, Is.Empty );

            args.FillExclusions( new List<string> { "bin", ".gitignore" } );

            Assert.That( args.Exclude.Count(), Is.EqualTo( 2 ) );
        }

        [Test]
        public void FillExclusions_will_not_set_folder_exclusion_list_if_already_set_on_commandline( )
        {
            var args = new Arguments( new string[] { "exclude:onlyOneFolder" } , _storage );
            Assert.That( args.Exclude.Count(), Is.EqualTo( 1 ) );

            args.FillExclusions( new List<string> { "bin", "gitignore" } );

            Assert.That( args.Exclude.Count(), Is.EqualTo( 1 ) );
        }

        [Test]
        public void AdHoc_argument_is_recognized()
        {
            var args = new Arguments(new string[] { "adhoc:\"^CSharp and @'Test' and ~'ExpectedException'\"" }, _storage);

            Assert.That(args.AdHoc, Is.EqualTo("^CSharp and @'Test' and ~'ExpectedException'"));
        }

        [Test]
        public void TrackHistory_true_when_supplied()
        {
            var args = new Arguments(new string[] { "trackHistory" }, _storage);
            Assert.That(args.TrackHistory, Is.True);
        }

        [Test]
        public void Foresight_true_when_supplied()
        {
            var args = new Arguments(new string[] { "foresight" }, _storage);
            Assert.That(args.Foresight, Is.True);
        }

        [Test]
        public void BreakOnDeltaDrop_true_when_supplied()
        {
            var args = new Arguments(new string[] { "BreakOnDeltaDrop" }, _storage);
            Assert.That(args.BreakOnDeltaDrop);
        }


        #region Failures, robustness, Help, Version

        [Test]
        public void malformed_args_throw()
        {
            var argsText = new string[] { "bad-argument" };
            var ex = Assert.Throws<Exception>(() => new Arguments(argsText, _storage));

            Assert.That(ex.Message, Is.EqualTo("Don't understand the input [bad-argument].  Try 'swept h' for help with arguments."));
        }

        [Test]
        public void unknown_args_throw()
        {
            var argsText = new string[] { "oddity:unrecognized_arg_name" };
            var ex = Assert.Throws<Exception>(() => new Arguments(argsText, _storage));

            Assert.That(ex.Message, Is.EqualTo("Don't recognize the argument [oddity]."));
        }

        [Test]
        public void args_are_recognized_case_insensitive()
        {
            var argsText = new string[] { "LIbrarY:c:\\foo.library" };
            var args = new Arguments(argsText, _storage);
            Assert.That(args.Library, Is.EqualTo("c:\\foo.library"));
        }

        [TestCase("usage")]
        [TestCase("help")]
        [TestCase("/?")]
        public void Help_arg_works_even_without_library_arg(string help)
        {
            var args = new Arguments(new string[] { help }, _storage);

            string output;
            using (StringWriter writer = new StringWriter())
            {
                args.DisplayMessages(writer);
                writer.Close();
                output = writer.ToString();
            }
            Assert.That(output, Is.EqualTo(Arguments.UsageMessage));
        }

        [Test]
        public void Version_arg_works_even_without_library_arg()
        {
            var args = new Arguments(new string[] { "version" }, _storage);
            string output;
            using (var writer = new StringWriter())
            {
                args.DisplayMessages(writer);
                writer.Close();
                output = writer.ToString();
            }
            Assert.That(output, Is.EqualTo(Arguments.VersionMessage));
        }

        #endregion

        #region Experimental or obsolete
        [Test]
        public void Pipe_sets_PipeSource()
        {
            var args = new Arguments(new string[] { "pipe:svn" }, _storage);
            Assert.That(args.PipeSource, Is.EqualTo(PipeSource.SVN));
        }

        [Test]
        public void Changeset_is_filename()
        {
            var args = new Arguments(new string[] { "changeset:foo_changes.xml" }, _storage);
            Assert.That(args.ChangeSet, Is.EqualTo("foo_changes.xml"));
        }

        [Test]
        public void args_file_count_limit_defaults_off()
        {
            var argsText = new string[] { };
            var args = new Arguments(argsText, _storage);
            Assert.That(args.FileCountLimit, Is.EqualTo(-1));
        }

        [Test]
        public void args_file_count_limit_is_understood()
        {
            var argsText = new string[] { "filelimit:10" };
            var args = new Arguments(argsText, _storage);
            Assert.That(args.FileCountLimit, Is.EqualTo(10));
        }

        #endregion

    }
}
