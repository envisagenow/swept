//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 ..\\..\\DSL\\ChangeRule.g 2011-06-25 06:18:35

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


#pragma warning disable 3021


using System.Collections.Generic;
using Antlr.Runtime;

namespace swept.DSL
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class ChangeRuleLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int AND=4;
	public const int CHARACTER_LITERAL=5;
	public const int DECIMAL_LITERAL=6;
	public const int DIFFERENCE=7;
	public const int EscapeSequence=8;
	public const int FILE_LANGUAGE=9;
	public const int FILE_NAME=10;
	public const int IDENTIFIER=11;
	public const int LANGUAGE=12;
	public const int LETTER=13;
	public const int LINES_MATCH=14;
	public const int LINE_COMMENT=15;
	public const int OR=16;
	public const int STRING_BODY_DQ=17;
	public const int STRING_BODY_SQ=18;
	public const int STRING_LITERAL=19;
	public const int WS=20;
	public const int T__21=21;
	public const int T__22=22;

	const int HIDDEN = Hidden;


    // delegates
    // delegators

	public ChangeRuleLexer()
	{
		OnCreated();
	}

	public ChangeRuleLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public ChangeRuleLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{


		OnCreated();
	}
	public override string GrammarFileName { get { return "..\\..\\DSL\\ChangeRule.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__21();
	partial void LeaveRule_T__21();

	// $ANTLR start "T__21"
	[GrammarRule("T__21")]
	private void mT__21()
	{
		EnterRule_T__21();
		EnterRule("T__21", 1);
		TraceIn("T__21", 1);
		try
		{
			int _type = T__21;
			int _channel = DefaultTokenChannel;
			// ..\\..\\DSL\\ChangeRule.g:15:7: ( '(' )
			DebugEnterAlt(1);
			// ..\\..\\DSL\\ChangeRule.g:15:9: '('
			{
			DebugLocation(15, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__21", 1);
			LeaveRule("T__21", 1);
			LeaveRule_T__21();
		}
	}
	// $ANTLR end "T__21"

	partial void EnterRule_T__22();
	partial void LeaveRule_T__22();

	// $ANTLR start "T__22"
	[GrammarRule("T__22")]
	private void mT__22()
	{
		EnterRule_T__22();
		EnterRule("T__22", 2);
		TraceIn("T__22", 2);
		try
		{
			int _type = T__22;
			int _channel = DefaultTokenChannel;
			// ..\\..\\DSL\\ChangeRule.g:16:7: ( ')' )
			DebugEnterAlt(1);
			// ..\\..\\DSL\\ChangeRule.g:16:9: ')'
			{
			DebugLocation(16, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__22", 2);
			LeaveRule("T__22", 2);
			LeaveRule_T__22();
		}
	}
	// $ANTLR end "T__22"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 3);
		TraceIn("OR", 3);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// ..\\..\\DSL\\ChangeRule.g:29:3: ( ( '||' | 'or' ) )
			DebugEnterAlt(1);
			// ..\\..\\DSL\\ChangeRule.g:29:5: ( '||' | 'or' )
			{
			DebugLocation(29, 5);
			// ..\\..\\DSL\\ChangeRule.g:29:5: ( '||' | 'or' )
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_0 = input.LA(1);

			if ((LA1_0=='|'))
			{
				alt1 = 1;
			}
			else if ((LA1_0=='o'))
			{
				alt1 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\DSL\\ChangeRule.g:29:6: '||'
				{
				DebugLocation(29, 6);
				Match("||"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\DSL\\ChangeRule.g:29:13: 'or'
				{
				DebugLocation(29, 13);
				Match("or"); 


				}
				break;

			}
			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 3);
			LeaveRule("OR", 3);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_DIFFERENCE();
	partial void LeaveRule_DIFFERENCE();

	// $ANTLR start "DIFFERENCE"
	[GrammarRule("DIFFERENCE")]
	private void mDIFFERENCE()
	{
		EnterRule_DIFFERENCE();
		EnterRule("DIFFERENCE", 4);
		TraceIn("DIFFERENCE", 4);
		try
		{
			int _type = DIFFERENCE;
			int _channel = DefaultTokenChannel;
			// ..\\..\\DSL\\ChangeRule.g:30:11: ( ( '-' | 'except' ) )
			DebugEnterAlt(1);
			// ..\\..\\DSL\\ChangeRule.g:30:13: ( '-' | 'except' )
			{
			DebugLocation(30, 13);
			// ..\\..\\DSL\\ChangeRule.g:30:13: ( '-' | 'except' )
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0=='-'))
			{
				alt2 = 1;
			}
			else if ((LA2_0=='e'))
			{
				alt2 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\DSL\\ChangeRule.g:30:14: '-'
				{
				DebugLocation(30, 14);
				Match('-'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\DSL\\ChangeRule.g:30:20: 'except'
				{
				DebugLocation(30, 20);
				Match("except"); 


				}
				break;

			}
			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIFFERENCE", 4);
			LeaveRule("DIFFERENCE", 4);
			LeaveRule_DIFFERENCE();
		}
	}
	// $ANTLR end "DIFFERENCE"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 5);
		TraceIn("AND", 5);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// ..\\..\\DSL\\ChangeRule.g:35:4: ( ( '&&' | 'and' ) )
			DebugEnterAlt(1);
			// ..\\..\\DSL\\ChangeRule.g:35:6: ( '&&' | 'and' )
			{
			DebugLocation(35, 6);
			// ..\\..\\DSL\\ChangeRule.g:35:6: ( '&&' | 'and' )
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0=='&'))
			{
				alt3 = 1;
			}
			else if ((LA3_0=='a'))
			{
				alt3 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\DSL\\ChangeRule.g:35:7: '&&'
				{
				DebugLocation(35, 7);
				Match("&&"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\DSL\\ChangeRule.g:35:14: 'and'
				{
				DebugLocation(35, 14);
				Match("and"); 


				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 5);
			LeaveRule("AND", 5);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_FILE_NAME();
	partial void LeaveRule_FILE_NAME();

	// $ANTLR start "FILE_NAME"
	[GrammarRule("FILE_NAME")]
	private void mFILE_NAME()
	{
		EnterRule_FILE_NAME();
		EnterRule("FILE_NAME", 6);
		TraceIn("FILE_NAME", 6);
		try
		{
			int _type = FILE_NAME;
			int _channel = DefaultTokenChannel;
			// ..\\..\\DSL\\ChangeRule.g:45:10: ( 'file.name' | 'f.n' | '@' )
			int alt4=3;
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0=='f'))
			{
				int LA4_1 = input.LA(2);

				if ((LA4_1=='i'))
				{
					alt4 = 1;
				}
				else if ((LA4_1=='.'))
				{
					alt4 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA4_0=='@'))
			{
				alt4 = 3;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\DSL\\ChangeRule.g:45:13: 'file.name'
				{
				DebugLocation(45, 13);
				Match("file.name"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\DSL\\ChangeRule.g:45:28: 'f.n'
				{
				DebugLocation(45, 28);
				Match("f.n"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\DSL\\ChangeRule.g:45:36: '@'
				{
				DebugLocation(45, 36);
				Match('@'); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FILE_NAME", 6);
			LeaveRule("FILE_NAME", 6);
			LeaveRule_FILE_NAME();
		}
	}
	// $ANTLR end "FILE_NAME"

	partial void EnterRule_LINES_MATCH();
	partial void LeaveRule_LINES_MATCH();

	// $ANTLR start "LINES_MATCH"
	[GrammarRule("LINES_MATCH")]
	private void mLINES_MATCH()
	{
		EnterRule_LINES_MATCH();
		EnterRule("LINES_MATCH", 7);
		TraceIn("LINES_MATCH", 7);
		try
		{
			int _type = LINES_MATCH;
			int _channel = DefaultTokenChannel;
			// ..\\..\\DSL\\ChangeRule.g:46:12: ( 'lines.match' | 'l.m' | '~' )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0=='l'))
			{
				int LA5_1 = input.LA(2);

				if ((LA5_1=='i'))
				{
					alt5 = 1;
				}
				else if ((LA5_1=='.'))
				{
					alt5 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA5_0=='~'))
			{
				alt5 = 3;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\DSL\\ChangeRule.g:46:14: 'lines.match'
				{
				DebugLocation(46, 14);
				Match("lines.match"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\DSL\\ChangeRule.g:46:30: 'l.m'
				{
				DebugLocation(46, 30);
				Match("l.m"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\DSL\\ChangeRule.g:46:38: '~'
				{
				DebugLocation(46, 38);
				Match('~'); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LINES_MATCH", 7);
			LeaveRule("LINES_MATCH", 7);
			LeaveRule_LINES_MATCH();
		}
	}
	// $ANTLR end "LINES_MATCH"

	partial void EnterRule_FILE_LANGUAGE();
	partial void LeaveRule_FILE_LANGUAGE();

	// $ANTLR start "FILE_LANGUAGE"
	[GrammarRule("FILE_LANGUAGE")]
	private void mFILE_LANGUAGE()
	{
		EnterRule_FILE_LANGUAGE();
		EnterRule("FILE_LANGUAGE", 8);
		TraceIn("FILE_LANGUAGE", 8);
		try
		{
			int _type = FILE_LANGUAGE;
			int _channel = DefaultTokenChannel;
			// ..\\..\\DSL\\ChangeRule.g:47:14: ( 'file.language' | 'f.l' | '^' )
			int alt6=3;
			try { DebugEnterDecision(6, false);
			int LA6_0 = input.LA(1);

			if ((LA6_0=='f'))
			{
				int LA6_1 = input.LA(2);

				if ((LA6_1=='i'))
				{
					alt6 = 1;
				}
				else if ((LA6_1=='.'))
				{
					alt6 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA6_0=='^'))
			{
				alt6 = 3;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\DSL\\ChangeRule.g:47:16: 'file.language'
				{
				DebugLocation(47, 16);
				Match("file.language"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\DSL\\ChangeRule.g:47:34: 'f.l'
				{
				DebugLocation(47, 34);
				Match("f.l"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\DSL\\ChangeRule.g:47:42: '^'
				{
				DebugLocation(47, 42);
				Match('^'); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FILE_LANGUAGE", 8);
			LeaveRule("FILE_LANGUAGE", 8);
			LeaveRule_FILE_LANGUAGE();
		}
	}
	// $ANTLR end "FILE_LANGUAGE"

	partial void EnterRule_LANGUAGE();
	partial void LeaveRule_LANGUAGE();

	// $ANTLR start "LANGUAGE"
	[GrammarRule("LANGUAGE")]
	private void mLANGUAGE()
	{
		EnterRule_LANGUAGE();
		EnterRule("LANGUAGE", 9);
		TraceIn("LANGUAGE", 9);
		try
		{
			int _type = LANGUAGE;
			int _channel = DefaultTokenChannel;
			// ..\\..\\DSL\\ChangeRule.g:57:9: ( ( 'CSharp' | 'HTML' | 'JavaScript' | 'CSS' | 'XSLT' | 'VBNet' | 'Project' | 'Solution' | 'Unknown' ) )
			DebugEnterAlt(1);
			// ..\\..\\DSL\\ChangeRule.g:58:2: ( 'CSharp' | 'HTML' | 'JavaScript' | 'CSS' | 'XSLT' | 'VBNet' | 'Project' | 'Solution' | 'Unknown' )
			{
			DebugLocation(58, 2);
			// ..\\..\\DSL\\ChangeRule.g:58:2: ( 'CSharp' | 'HTML' | 'JavaScript' | 'CSS' | 'XSLT' | 'VBNet' | 'Project' | 'Solution' | 'Unknown' )
			int alt7=9;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			try
			{
				alt7 = dfa7.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\DSL\\ChangeRule.g:58:4: 'CSharp'
				{
				DebugLocation(58, 4);
				Match("CSharp"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\DSL\\ChangeRule.g:58:15: 'HTML'
				{
				DebugLocation(58, 15);
				Match("HTML"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ..\\..\\DSL\\ChangeRule.g:58:24: 'JavaScript'
				{
				DebugLocation(58, 24);
				Match("JavaScript"); 


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ..\\..\\DSL\\ChangeRule.g:58:39: 'CSS'
				{
				DebugLocation(58, 39);
				Match("CSS"); 


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ..\\..\\DSL\\ChangeRule.g:58:47: 'XSLT'
				{
				DebugLocation(58, 47);
				Match("XSLT"); 


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// ..\\..\\DSL\\ChangeRule.g:58:56: 'VBNet'
				{
				DebugLocation(58, 56);
				Match("VBNet"); 


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// ..\\..\\DSL\\ChangeRule.g:58:66: 'Project'
				{
				DebugLocation(58, 66);
				Match("Project"); 


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// ..\\..\\DSL\\ChangeRule.g:58:78: 'Solution'
				{
				DebugLocation(58, 78);
				Match("Solution"); 


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// ..\\..\\DSL\\ChangeRule.g:58:91: 'Unknown'
				{
				DebugLocation(58, 91);
				Match("Unknown"); 


				}
				break;

			}
			} finally { DebugExitSubRule(7); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LANGUAGE", 9);
			LeaveRule("LANGUAGE", 9);
			LeaveRule_LANGUAGE();
		}
	}
	// $ANTLR end "LANGUAGE"

	partial void EnterRule_IDENTIFIER();
	partial void LeaveRule_IDENTIFIER();

	// $ANTLR start "IDENTIFIER"
	[GrammarRule("IDENTIFIER")]
	private void mIDENTIFIER()
	{
		EnterRule_IDENTIFIER();
		EnterRule("IDENTIFIER", 10);
		TraceIn("IDENTIFIER", 10);
		try
		{
			int _type = IDENTIFIER;
			int _channel = DefaultTokenChannel;
			// ..\\..\\DSL\\ChangeRule.g:64:2: ( LETTER ( LETTER | '0' .. '9' )* )
			DebugEnterAlt(1);
			// ..\\..\\DSL\\ChangeRule.g:64:4: LETTER ( LETTER | '0' .. '9' )*
			{
			DebugLocation(64, 4);
			mLETTER(); 
			DebugLocation(64, 11);
			// ..\\..\\DSL\\ChangeRule.g:64:11: ( LETTER | '0' .. '9' )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0=='$'||(LA8_0>='0' && LA8_0<='9')||(LA8_0>='A' && LA8_0<='Z')||LA8_0=='_'||(LA8_0>='a' && LA8_0<='z')))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\DSL\\ChangeRule.g:
					{
					DebugLocation(64, 11);
					input.Consume();


					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDENTIFIER", 10);
			LeaveRule("IDENTIFIER", 10);
			LeaveRule_IDENTIFIER();
		}
	}
	// $ANTLR end "IDENTIFIER"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 11);
		TraceIn("LETTER", 11);
		try
		{
			// ..\\..\\DSL\\ChangeRule.g:70:2: ( '$' | 'A' .. 'Z' | 'a' .. 'z' | '_' )
			DebugEnterAlt(1);
			// ..\\..\\DSL\\ChangeRule.g:
			{
			DebugLocation(70, 2);
			if (input.LA(1)=='$'||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("LETTER", 11);
			LeaveRule("LETTER", 11);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_CHARACTER_LITERAL();
	partial void LeaveRule_CHARACTER_LITERAL();

	// $ANTLR start "CHARACTER_LITERAL"
	[GrammarRule("CHARACTER_LITERAL")]
	private void mCHARACTER_LITERAL()
	{
		EnterRule_CHARACTER_LITERAL();
		EnterRule("CHARACTER_LITERAL", 12);
		TraceIn("CHARACTER_LITERAL", 12);
		try
		{
			int _type = CHARACTER_LITERAL;
			int _channel = DefaultTokenChannel;
			// ..\\..\\DSL\\ChangeRule.g:76:5: ( '\\'' ( EscapeSequence |~ ( '\\'' | '\\\\' ) ) '\\'' )
			DebugEnterAlt(1);
			// ..\\..\\DSL\\ChangeRule.g:76:9: '\\'' ( EscapeSequence |~ ( '\\'' | '\\\\' ) ) '\\''
			{
			DebugLocation(76, 9);
			Match('\''); 
			DebugLocation(76, 14);
			// ..\\..\\DSL\\ChangeRule.g:76:14: ( EscapeSequence |~ ( '\\'' | '\\\\' ) )
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0=='\\'))
			{
				alt9 = 1;
			}
			else if (((LA9_0>='\u0000' && LA9_0<='&')||(LA9_0>='(' && LA9_0<='[')||(LA9_0>=']' && LA9_0<='\uFFFF')))
			{
				alt9 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\DSL\\ChangeRule.g:76:16: EscapeSequence
				{
				DebugLocation(76, 16);
				mEscapeSequence(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\DSL\\ChangeRule.g:76:33: ~ ( '\\'' | '\\\\' )
				{
				DebugLocation(76, 33);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(76, 48);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHARACTER_LITERAL", 12);
			LeaveRule("CHARACTER_LITERAL", 12);
			LeaveRule_CHARACTER_LITERAL();
		}
	}
	// $ANTLR end "CHARACTER_LITERAL"

	partial void EnterRule_STRING_LITERAL();
	partial void LeaveRule_STRING_LITERAL();

	// $ANTLR start "STRING_LITERAL"
	[GrammarRule("STRING_LITERAL")]
	private void mSTRING_LITERAL()
	{
		EnterRule_STRING_LITERAL();
		EnterRule("STRING_LITERAL", 13);
		TraceIn("STRING_LITERAL", 13);
		try
		{
			int _type = STRING_LITERAL;
			int _channel = DefaultTokenChannel;
			CommonToken STRING_BODY_DQ1 = default(CommonToken);
			CommonToken STRING_BODY_SQ2 = default(CommonToken);

			// ..\\..\\DSL\\ChangeRule.g:80:5: ( '\"' STRING_BODY_DQ '\"' | '\\'' STRING_BODY_SQ '\\'' )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0=='\"'))
			{
				alt10 = 1;
			}
			else if ((LA10_0=='\''))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\DSL\\ChangeRule.g:80:8: '\"' STRING_BODY_DQ '\"'
				{
				DebugLocation(80, 8);
				Match('\"'); 
				DebugLocation(80, 12);
				int STRING_BODY_DQ1Start280 = CharIndex;
				int STRING_BODY_DQ1StartLine280 = Line;
				int STRING_BODY_DQ1StartCharPos280 = CharPositionInLine;
				mSTRING_BODY_DQ(); 
				STRING_BODY_DQ1 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, STRING_BODY_DQ1Start280, CharIndex-1);
				STRING_BODY_DQ1.Line = STRING_BODY_DQ1StartLine280;
				STRING_BODY_DQ1.CharPositionInLine = STRING_BODY_DQ1StartCharPos280;
				DebugLocation(80, 27);
				Match('\"'); 
				DebugLocation(80, 31);
				 Text = (STRING_BODY_DQ1!=null?STRING_BODY_DQ1.Text:null); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ..\\..\\DSL\\ChangeRule.g:81:8: '\\'' STRING_BODY_SQ '\\''
				{
				DebugLocation(81, 8);
				Match('\''); 
				DebugLocation(81, 13);
				int STRING_BODY_SQ2Start296 = CharIndex;
				int STRING_BODY_SQ2StartLine296 = Line;
				int STRING_BODY_SQ2StartCharPos296 = CharPositionInLine;
				mSTRING_BODY_SQ(); 
				STRING_BODY_SQ2 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, STRING_BODY_SQ2Start296, CharIndex-1);
				STRING_BODY_SQ2.Line = STRING_BODY_SQ2StartLine296;
				STRING_BODY_SQ2.CharPositionInLine = STRING_BODY_SQ2StartCharPos296;
				DebugLocation(81, 28);
				Match('\''); 
				DebugLocation(81, 33);
				 Text = (STRING_BODY_SQ2!=null?STRING_BODY_SQ2.Text:null); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_LITERAL", 13);
			LeaveRule("STRING_LITERAL", 13);
			LeaveRule_STRING_LITERAL();
		}
	}
	// $ANTLR end "STRING_LITERAL"

	partial void EnterRule_STRING_BODY_DQ();
	partial void LeaveRule_STRING_BODY_DQ();

	// $ANTLR start "STRING_BODY_DQ"
	[GrammarRule("STRING_BODY_DQ")]
	private void mSTRING_BODY_DQ()
	{
		EnterRule_STRING_BODY_DQ();
		EnterRule("STRING_BODY_DQ", 14);
		TraceIn("STRING_BODY_DQ", 14);
		try
		{
			// ..\\..\\DSL\\ChangeRule.g:85:5: ( ( EscapeSequence |~ ( '\\\\' | '\"' ) )* )
			DebugEnterAlt(1);
			// ..\\..\\DSL\\ChangeRule.g:85:8: ( EscapeSequence |~ ( '\\\\' | '\"' ) )*
			{
			DebugLocation(85, 8);
			// ..\\..\\DSL\\ChangeRule.g:85:8: ( EscapeSequence |~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=3;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0=='\\'))
				{
					alt11 = 1;
				}
				else if (((LA11_0>='\u0000' && LA11_0<='!')||(LA11_0>='#' && LA11_0<='[')||(LA11_0>=']' && LA11_0<='\uFFFF')))
				{
					alt11 = 2;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\DSL\\ChangeRule.g:85:10: EscapeSequence
					{
					DebugLocation(85, 10);
					mEscapeSequence(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\DSL\\ChangeRule.g:85:27: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(85, 27);
					input.Consume();


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

		}
		finally
		{
			TraceOut("STRING_BODY_DQ", 14);
			LeaveRule("STRING_BODY_DQ", 14);
			LeaveRule_STRING_BODY_DQ();
		}
	}
	// $ANTLR end "STRING_BODY_DQ"

	partial void EnterRule_STRING_BODY_SQ();
	partial void LeaveRule_STRING_BODY_SQ();

	// $ANTLR start "STRING_BODY_SQ"
	[GrammarRule("STRING_BODY_SQ")]
	private void mSTRING_BODY_SQ()
	{
		EnterRule_STRING_BODY_SQ();
		EnterRule("STRING_BODY_SQ", 15);
		TraceIn("STRING_BODY_SQ", 15);
		try
		{
			// ..\\..\\DSL\\ChangeRule.g:89:5: ( ( EscapeSequence |~ ( '\\\\' | '\\'' ) )* )
			DebugEnterAlt(1);
			// ..\\..\\DSL\\ChangeRule.g:89:8: ( EscapeSequence |~ ( '\\\\' | '\\'' ) )*
			{
			DebugLocation(89, 8);
			// ..\\..\\DSL\\ChangeRule.g:89:8: ( EscapeSequence |~ ( '\\\\' | '\\'' ) )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=3;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0=='\\'))
				{
					alt12 = 1;
				}
				else if (((LA12_0>='\u0000' && LA12_0<='&')||(LA12_0>='(' && LA12_0<='[')||(LA12_0>=']' && LA12_0<='\uFFFF')))
				{
					alt12 = 2;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\DSL\\ChangeRule.g:89:10: EscapeSequence
					{
					DebugLocation(89, 10);
					mEscapeSequence(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ..\\..\\DSL\\ChangeRule.g:89:27: ~ ( '\\\\' | '\\'' )
					{
					DebugLocation(89, 27);
					input.Consume();


					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

		}
		finally
		{
			TraceOut("STRING_BODY_SQ", 15);
			LeaveRule("STRING_BODY_SQ", 15);
			LeaveRule_STRING_BODY_SQ();
		}
	}
	// $ANTLR end "STRING_BODY_SQ"

	partial void EnterRule_DECIMAL_LITERAL();
	partial void LeaveRule_DECIMAL_LITERAL();

	// $ANTLR start "DECIMAL_LITERAL"
	[GrammarRule("DECIMAL_LITERAL")]
	private void mDECIMAL_LITERAL()
	{
		EnterRule_DECIMAL_LITERAL();
		EnterRule("DECIMAL_LITERAL", 16);
		TraceIn("DECIMAL_LITERAL", 16);
		try
		{
			int _type = DECIMAL_LITERAL;
			int _channel = DefaultTokenChannel;
			// ..\\..\\DSL\\ChangeRule.g:92:17: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// ..\\..\\DSL\\ChangeRule.g:92:19: ( '0' .. '9' )+
			{
			DebugLocation(92, 19);
			// ..\\..\\DSL\\ChangeRule.g:92:19: ( '0' .. '9' )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if (((LA13_0>='0' && LA13_0<='9')))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\DSL\\ChangeRule.g:
					{
					DebugLocation(92, 19);
					input.Consume();


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DECIMAL_LITERAL", 16);
			LeaveRule("DECIMAL_LITERAL", 16);
			LeaveRule_DECIMAL_LITERAL();
		}
	}
	// $ANTLR end "DECIMAL_LITERAL"

	partial void EnterRule_EscapeSequence();
	partial void LeaveRule_EscapeSequence();

	// $ANTLR start "EscapeSequence"
	[GrammarRule("EscapeSequence")]
	private void mEscapeSequence()
	{
		EnterRule_EscapeSequence();
		EnterRule("EscapeSequence", 17);
		TraceIn("EscapeSequence", 17);
		try
		{
			// ..\\..\\DSL\\ChangeRule.g:97:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) )
			DebugEnterAlt(1);
			// ..\\..\\DSL\\ChangeRule.g:97:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
			{
			DebugLocation(97, 9);
			Match('\\'); 
			DebugLocation(97, 14);
			if (input.LA(1)=='\"'||input.LA(1)=='\''||input.LA(1)=='\\'||input.LA(1)=='b'||input.LA(1)=='f'||input.LA(1)=='n'||input.LA(1)=='r'||input.LA(1)=='t')
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("EscapeSequence", 17);
			LeaveRule("EscapeSequence", 17);
			LeaveRule_EscapeSequence();
		}
	}
	// $ANTLR end "EscapeSequence"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 18);
		TraceIn("WS", 18);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// ..\\..\\DSL\\ChangeRule.g:99:5: ( ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' ) )
			DebugEnterAlt(1);
			// ..\\..\\DSL\\ChangeRule.g:99:8: ( ' ' | '\\r' | '\\t' | '\\u000C' | '\\n' )
			{
			DebugLocation(99, 8);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||(input.LA(1)>='\f' && input.LA(1)<='\r')||input.LA(1)==' ')
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}

			DebugLocation(99, 38);
			_channel=HIDDEN;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 18);
			LeaveRule("WS", 18);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_LINE_COMMENT();
	partial void LeaveRule_LINE_COMMENT();

	// $ANTLR start "LINE_COMMENT"
	[GrammarRule("LINE_COMMENT")]
	private void mLINE_COMMENT()
	{
		EnterRule_LINE_COMMENT();
		EnterRule("LINE_COMMENT", 19);
		TraceIn("LINE_COMMENT", 19);
		try
		{
			int _type = LINE_COMMENT;
			int _channel = DefaultTokenChannel;
			// ..\\..\\DSL\\ChangeRule.g:103:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// ..\\..\\DSL\\ChangeRule.g:103:7: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
			{
			DebugLocation(103, 7);
			Match("//"); 

			DebugLocation(103, 12);
			// ..\\..\\DSL\\ChangeRule.g:103:12: (~ ( '\\n' | '\\r' ) )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if (((LA14_0>='\u0000' && LA14_0<='\t')||(LA14_0>='\u000B' && LA14_0<='\f')||(LA14_0>='\u000E' && LA14_0<='\uFFFF')))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// ..\\..\\DSL\\ChangeRule.g:
					{
					DebugLocation(103, 12);
					input.Consume();


					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }

			DebugLocation(103, 26);
			// ..\\..\\DSL\\ChangeRule.g:103:26: ( '\\r' )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0=='\r'))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// ..\\..\\DSL\\ChangeRule.g:103:26: '\\r'
				{
				DebugLocation(103, 26);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(103, 32);
			Match('\n'); 
			DebugLocation(103, 37);
			_channel=HIDDEN;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LINE_COMMENT", 19);
			LeaveRule("LINE_COMMENT", 19);
			LeaveRule_LINE_COMMENT();
		}
	}
	// $ANTLR end "LINE_COMMENT"

	public override void mTokens()
	{
		// ..\\..\\DSL\\ChangeRule.g:1:8: ( T__21 | T__22 | OR | DIFFERENCE | AND | FILE_NAME | LINES_MATCH | FILE_LANGUAGE | LANGUAGE | IDENTIFIER | CHARACTER_LITERAL | STRING_LITERAL | DECIMAL_LITERAL | WS | LINE_COMMENT )
		int alt16=15;
		try { DebugEnterDecision(16, false);
		try
		{
			alt16 = dfa16.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(16); }
		switch (alt16)
		{
		case 1:
			DebugEnterAlt(1);
			// ..\\..\\DSL\\ChangeRule.g:1:10: T__21
			{
			DebugLocation(1, 10);
			mT__21(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// ..\\..\\DSL\\ChangeRule.g:1:16: T__22
			{
			DebugLocation(1, 16);
			mT__22(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// ..\\..\\DSL\\ChangeRule.g:1:22: OR
			{
			DebugLocation(1, 22);
			mOR(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// ..\\..\\DSL\\ChangeRule.g:1:25: DIFFERENCE
			{
			DebugLocation(1, 25);
			mDIFFERENCE(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// ..\\..\\DSL\\ChangeRule.g:1:36: AND
			{
			DebugLocation(1, 36);
			mAND(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// ..\\..\\DSL\\ChangeRule.g:1:40: FILE_NAME
			{
			DebugLocation(1, 40);
			mFILE_NAME(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// ..\\..\\DSL\\ChangeRule.g:1:50: LINES_MATCH
			{
			DebugLocation(1, 50);
			mLINES_MATCH(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// ..\\..\\DSL\\ChangeRule.g:1:62: FILE_LANGUAGE
			{
			DebugLocation(1, 62);
			mFILE_LANGUAGE(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// ..\\..\\DSL\\ChangeRule.g:1:76: LANGUAGE
			{
			DebugLocation(1, 76);
			mLANGUAGE(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// ..\\..\\DSL\\ChangeRule.g:1:85: IDENTIFIER
			{
			DebugLocation(1, 85);
			mIDENTIFIER(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// ..\\..\\DSL\\ChangeRule.g:1:96: CHARACTER_LITERAL
			{
			DebugLocation(1, 96);
			mCHARACTER_LITERAL(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// ..\\..\\DSL\\ChangeRule.g:1:114: STRING_LITERAL
			{
			DebugLocation(1, 114);
			mSTRING_LITERAL(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// ..\\..\\DSL\\ChangeRule.g:1:129: DECIMAL_LITERAL
			{
			DebugLocation(1, 129);
			mDECIMAL_LITERAL(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// ..\\..\\DSL\\ChangeRule.g:1:145: WS
			{
			DebugLocation(1, 145);
			mWS(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// ..\\..\\DSL\\ChangeRule.g:1:148: LINE_COMMENT
			{
			DebugLocation(1, 148);
			mLINE_COMMENT(); 

			}
			break;

		}

	}


	#region DFA
	DFA7 dfa7;
	DFA16 dfa16;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa7 = new DFA7(this);
		dfa16 = new DFA16(this, SpecialStateTransition16);
	}

	private class DFA7 : DFA
	{
		private const string DFA7_eotS =
			"\xC\xFFFF";
		private const string DFA7_eofS =
			"\xC\xFFFF";
		private const string DFA7_minS =
			"\x1\x43\x1\x53\x7\xFFFF\x1\x53\x2\xFFFF";
		private const string DFA7_maxS =
			"\x1\x58\x1\x53\x7\xFFFF\x1\x68\x2\xFFFF";
		private const string DFA7_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xFFFF\x1\x1\x1"+
			"\x4";
		private const string DFA7_specialS =
			"\xC\xFFFF}>";
		private static readonly string[] DFA7_transitionS =
			{
				"\x1\x1\x4\xFFFF\x1\x2\x1\xFFFF\x1\x3\x5\xFFFF\x1\x6\x2\xFFFF\x1\x7\x1"+
				"\xFFFF\x1\x8\x1\x5\x1\xFFFF\x1\x4",
				"\x1\x9",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xB\x14\xFFFF\x1\xA",
				"",
				""
			};

		private static readonly short[] DFA7_eot = DFA.UnpackEncodedString(DFA7_eotS);
		private static readonly short[] DFA7_eof = DFA.UnpackEncodedString(DFA7_eofS);
		private static readonly char[] DFA7_min = DFA.UnpackEncodedStringToUnsignedChars(DFA7_minS);
		private static readonly char[] DFA7_max = DFA.UnpackEncodedStringToUnsignedChars(DFA7_maxS);
		private static readonly short[] DFA7_accept = DFA.UnpackEncodedString(DFA7_acceptS);
		private static readonly short[] DFA7_special = DFA.UnpackEncodedString(DFA7_specialS);
		private static readonly short[][] DFA7_transition;

		static DFA7()
		{
			int numStates = DFA7_transitionS.Length;
			DFA7_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA7_transition[i] = DFA.UnpackEncodedString(DFA7_transitionS[i]);
			}
		}

		public DFA7( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 7;
			this.eot = DFA7_eot;
			this.eof = DFA7_eof;
			this.min = DFA7_min;
			this.max = DFA7_max;
			this.accept = DFA7_accept;
			this.special = DFA7_special;
			this.transition = DFA7_transition;
		}

		public override string Description { get { return "58:2: ( 'CSharp' | 'HTML' | 'JavaScript' | 'CSS' | 'XSLT' | 'VBNet' | 'Project' | 'Solution' | 'Unknown' )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA16 : DFA
	{
		private const string DFA16_eotS =
			"\x4\xFFFF\x1\x16\x1\xFFFF\x1\x16\x1\xFFFF\x2\x16\x1\xFFFF\x1\x16\x2\xFFFF"+
			"\x8\x16\x6\xFFFF\x1\x3\x3\x16\x1\xFFFF\x9\x16\x2\xFFFF\x1\x16\x1\x7\x3"+
			"\x16\x1\x3F\x7\x16\x2\xFFFF\x4\x16\x1\xFFFF\x1\x3F\x1\x16\x1\x3F\x4\x16"+
			"\x1\xFFFF\x1\x16\x1\xFFFF\x3\x16\x1\x3F\x3\x16\x1\x5\x1\x3F\x5\x16\x1"+
			"\x3F\x1\x16\x1\x3F\x1\x16\x1\x3F\x1\x16\x1\x3F";
		private const string DFA16_eofS =
			"\x5F\xFFFF";
		private const string DFA16_minS =
			"\x1\x9\x3\xFFFF\x1\x72\x1\xFFFF\x1\x78\x1\xFFFF\x1\x6E\x1\x2E\x1\xFFFF"+
			"\x1\x2E\x2\xFFFF\x1\x53\x1\x54\x1\x61\x1\x53\x1\x42\x1\x72\x1\x6F\x1"+
			"\x6E\x1\xFFFF\x1\x0\x4\xFFFF\x1\x24\x1\x63\x1\x64\x2\x6C\x1\x6E\x1\x53"+
			"\x1\x4D\x1\x76\x1\x4C\x1\x4E\x1\x6F\x1\x6C\x1\x6B\x1\x22\x1\x0\x1\x65"+
			"\x1\x24\x2\x65\x1\x61\x1\x24\x1\x4C\x1\x61\x1\x54\x1\x65\x1\x6A\x1\x75"+
			"\x1\x6E\x1\x0\x1\xFFFF\x1\x70\x1\x2E\x1\x73\x1\x72\x1\xFFFF\x1\x24\x1"+
			"\x53\x1\x24\x1\x74\x1\x65\x1\x74\x1\x6F\x1\xFFFF\x1\x74\x1\x6C\x1\x2E"+
			"\x1\x70\x1\x63\x1\x24\x1\x63\x1\x69\x1\x77\x2\x24\x1\x72\x1\x74\x1\x6F"+
			"\x1\x6E\x1\x69\x1\x24\x1\x6E\x1\x24\x1\x70\x1\x24\x1\x74\x1\x24";
		private const string DFA16_maxS =
			"\x1\x7E\x3\xFFFF\x1\x72\x1\xFFFF\x1\x78\x1\xFFFF\x1\x6E\x1\x69\x1\xFFFF"+
			"\x1\x69\x2\xFFFF\x1\x53\x1\x54\x1\x61\x1\x53\x1\x42\x1\x72\x1\x6F\x1"+
			"\x6E\x1\xFFFF\x1\xFFFF\x4\xFFFF\x1\x7A\x1\x63\x1\x64\x1\x6C\x2\x6E\x1"+
			"\x68\x1\x4D\x1\x76\x1\x4C\x1\x4E\x1\x6F\x1\x6C\x1\x6B\x1\x74\x1\xFFFF"+
			"\x1\x65\x1\x7A\x2\x65\x1\x61\x1\x7A\x1\x4C\x1\x61\x1\x54\x1\x65\x1\x6A"+
			"\x1\x75\x1\x6E\x1\xFFFF\x1\xFFFF\x1\x70\x1\x2E\x1\x73\x1\x72\x1\xFFFF"+
			"\x1\x7A\x1\x53\x1\x7A\x1\x74\x1\x65\x1\x74\x1\x6F\x1\xFFFF\x1\x74\x1"+
			"\x6E\x1\x2E\x1\x70\x1\x63\x1\x7A\x1\x63\x1\x69\x1\x77\x2\x7A\x1\x72\x1"+
			"\x74\x1\x6F\x1\x6E\x1\x69\x1\x7A\x1\x6E\x1\x7A\x1\x70\x1\x7A\x1\x74\x1"+
			"\x7A";
		private const string DFA16_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\xFFFF\x1\x4\x1\xFFFF\x1\x5\x2\xFFFF\x1"+
			"\x6\x1\xFFFF\x1\x7\x1\x8\x8\xFFFF\x1\xA\x1\xFFFF\x1\xC\x1\xD\x1\xE\x1"+
			"\xF\x1E\xFFFF\x1\xB\x4\xFFFF\x1\x9\x7\xFFFF\x1\xB\x17\xFFFF";
		private const string DFA16_specialS =
			"\x17\xFFFF\x1\x0\x13\xFFFF\x1\x1\xD\xFFFF\x1\x2\x25\xFFFF}>";
		private static readonly string[] DFA16_transitionS =
			{
				"\x2\x1A\x1\xFFFF\x2\x1A\x12\xFFFF\x1\x1A\x1\xFFFF\x1\x18\x1\xFFFF\x1"+
				"\x16\x1\xFFFF\x1\x7\x1\x17\x1\x1\x1\x2\x3\xFFFF\x1\x5\x1\xFFFF\x1\x1B"+
				"\xA\x19\x6\xFFFF\x1\xA\x2\x16\x1\xE\x4\x16\x1\xF\x1\x16\x1\x10\x5\x16"+
				"\x1\x13\x2\x16\x1\x14\x1\x16\x1\x15\x1\x12\x1\x16\x1\x11\x2\x16\x3\xFFFF"+
				"\x1\xD\x1\x16\x1\xFFFF\x1\x8\x3\x16\x1\x6\x1\x9\x5\x16\x1\xB\x2\x16"+
				"\x1\x4\xB\x16\x1\xFFFF\x1\x3\x1\xFFFF\x1\xC",
				"",
				"",
				"",
				"\x1\x1C",
				"",
				"\x1\x1D",
				"",
				"\x1\x1E",
				"\x1\x20\x3A\xFFFF\x1\x1F",
				"",
				"\x1\xC\x3A\xFFFF\x1\x21",
				"",
				"",
				"\x1\x22",
				"\x1\x23",
				"\x1\x24",
				"\x1\x25",
				"\x1\x26",
				"\x1\x27",
				"\x1\x28",
				"\x1\x29",
				"",
				"\x27\x2B\x1\x18\x34\x2B\x1\x2A\xFFA3\x2B",
				"",
				"",
				"",
				"",
				"\x1\x16\xB\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x2C",
				"\x1\x2D",
				"\x1\x2E",
				"\x1\xD\x1\xFFFF\x1\xA",
				"\x1\x2F",
				"\x1\x31\x14\xFFFF\x1\x30",
				"\x1\x32",
				"\x1\x33",
				"\x1\x34",
				"\x1\x35",
				"\x1\x36",
				"\x1\x37",
				"\x1\x38",
				"\x1\x39\x4\xFFFF\x1\x39\x34\xFFFF\x1\x39\x5\xFFFF\x1\x39\x3\xFFFF\x1"+
				"\x39\x7\xFFFF\x1\x39\x3\xFFFF\x1\x39\x1\xFFFF\x1\x39",
				"\x27\x18\x1\x3A\xFFD8\x18",
				"\x1\x3B",
				"\x1\x16\xB\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x3C",
				"\x1\x3D",
				"\x1\x3E",
				"\x1\x16\xB\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x40",
				"\x1\x41",
				"\x1\x42",
				"\x1\x43",
				"\x1\x44",
				"\x1\x45",
				"\x1\x46",
				"\x27\x18\x1\x3A\xFFD8\x18",
				"",
				"\x1\x48",
				"\x1\x49",
				"\x1\x4A",
				"\x1\x4B",
				"",
				"\x1\x16\xB\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x4C",
				"\x1\x16\xB\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x4D",
				"\x1\x4E",
				"\x1\x4F",
				"\x1\x50",
				"",
				"\x1\x51",
				"\x1\xD\x1\xFFFF\x1\xA",
				"\x1\xC",
				"\x1\x52",
				"\x1\x53",
				"\x1\x16\xB\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x54",
				"\x1\x55",
				"\x1\x56",
				"\x1\x16\xB\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x16\xB\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x57",
				"\x1\x58",
				"\x1\x59",
				"\x1\x5A",
				"\x1\x5B",
				"\x1\x16\xB\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x5C",
				"\x1\x16\xB\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x5D",
				"\x1\x16\xB\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16",
				"\x1\x5E",
				"\x1\x16\xB\xFFFF\xA\x16\x7\xFFFF\x1A\x16\x4\xFFFF\x1\x16\x1\xFFFF\x1A"+
				"\x16"
			};

		private static readonly short[] DFA16_eot = DFA.UnpackEncodedString(DFA16_eotS);
		private static readonly short[] DFA16_eof = DFA.UnpackEncodedString(DFA16_eofS);
		private static readonly char[] DFA16_min = DFA.UnpackEncodedStringToUnsignedChars(DFA16_minS);
		private static readonly char[] DFA16_max = DFA.UnpackEncodedStringToUnsignedChars(DFA16_maxS);
		private static readonly short[] DFA16_accept = DFA.UnpackEncodedString(DFA16_acceptS);
		private static readonly short[] DFA16_special = DFA.UnpackEncodedString(DFA16_specialS);
		private static readonly short[][] DFA16_transition;

		static DFA16()
		{
			int numStates = DFA16_transitionS.Length;
			DFA16_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA16_transition[i] = DFA.UnpackEncodedString(DFA16_transitionS[i]);
			}
		}

		public DFA16( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 16;
			this.eot = DFA16_eot;
			this.eof = DFA16_eof;
			this.min = DFA16_min;
			this.max = DFA16_max;
			this.accept = DFA16_accept;
			this.special = DFA16_special;
			this.transition = DFA16_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__21 | T__22 | OR | DIFFERENCE | AND | FILE_NAME | LINES_MATCH | FILE_LANGUAGE | LANGUAGE | IDENTIFIER | CHARACTER_LITERAL | STRING_LITERAL | DECIMAL_LITERAL | WS | LINE_COMMENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition16(DFA dfa, int s, IIntStream _input)
	{
		IIntStream input = _input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA16_23 = input.LA(1);

				s = -1;
				if ((LA16_23=='\\')) {s = 42;}

				else if (((LA16_23>='\u0000' && LA16_23<='&')||(LA16_23>='(' && LA16_23<='[')||(LA16_23>=']' && LA16_23<='\uFFFF'))) {s = 43;}

				else if ((LA16_23=='\'')) {s = 24;}

				if (s >= 0) return s;
				break;
			case 1:
				int LA16_43 = input.LA(1);

				s = -1;
				if ((LA16_43=='\'')) {s = 58;}

				else if (((LA16_43>='\u0000' && LA16_43<='&')||(LA16_43>='(' && LA16_43<='\uFFFF'))) {s = 24;}

				if (s >= 0) return s;
				break;
			case 2:
				int LA16_57 = input.LA(1);

				s = -1;
				if ((LA16_57=='\'')) {s = 58;}

				else if (((LA16_57>='\u0000' && LA16_57<='&')||(LA16_57>='(' && LA16_57<='\uFFFF'))) {s = 24;}

				if (s >= 0) return s;
				break;
		}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 16, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
 
	#endregion

}

} // namespace swept.DSL
